#Minimax algorithm for tic-tac-toe game (Human vs AI)

# Define the board as a list
board = [' ' for _ in range(9)]  # 3x3 board

# Function to print the Tic-Tac-Toe board
def print_board():
    for row in [board[i * 3:(i + 1) * 3] for i in range(3)]:
        print('| ' + ' | '.join(row) + ' |')

# Check for winner
def winner(board, player):
    win_conditions = [(0, 1, 2), (3, 4, 5), (6, 7, 8),  # rows
                      (0, 3, 6), (1, 4, 7), (2, 5, 8),  # columns
                      (0, 4, 8), (2, 4, 6)]  # diagonals
    return any(board[i] == board[j] == board[k] == player for i, j, k in win_conditions)

# Check if board is full
def is_board_full(board):
    return ' ' not in board

# Minimax function to evaluate the best move
def minimax(board, depth, is_maximizing):
    if winner(board, 'X'):
        return -10 + depth
    if winner(board, 'O'):
        return 10 - depth
    if is_board_full(board):
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'  # AI's move
                score = minimax(board, depth + 1, False)
                board[i] = ' '
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'  # Human's move
                score = minimax(board, depth + 1, True)
                board[i] = ' '
                best_score = min(score, best_score)
        return best_score

# Function to find the best move for AI
def find_best_move(board):
    best_move = None
    best_score = -float('inf')
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'  # AI's move
            score = minimax(board, 0, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                best_move = i
    return best_move

# Play a move (human or AI)
def play_move(position, player):
    if board[position] == ' ':
        board[position] = player
        return True
    return False

# Main function to run the game
def play_game():
    print_board()
    while True:
        # Human's turn
        human_move = int(input("Enter your move (0-8): "))
        if play_move(human_move, 'X'):
            print_board()
            if winner(board, 'X'):
                print("Impossible phenomena! You win!")
                break
            elif is_board_full(board):
                print("As expected.It's a tie!")
                break

        # AI's turn
        print("It's AI's turn...")
        ai_move = find_best_move(board)
        play_move(ai_move, 'O')
        print_board()
        if winner(board, 'O'):
            print("As always, AI wins!")
            break
        elif is_board_full(board):
            print("It's a tie!")
            break

# Run the game
if __name__ == "__main__":
    play_game()
